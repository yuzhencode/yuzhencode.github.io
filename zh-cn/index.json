


[{"content":"","date":"24 September 2024","externalUrl":null,"permalink":"/tags/bug/","section":"Tags","summary":"","title":"Bug","type":"tags"},{"content":"","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/tags/git/","section":"标签","summary":"","title":"Git","type":"tags"},{"content":"","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/tags/yuzhen/","section":"标签","summary":"","title":"Yuzhen","type":"tags"},{"content":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\n在这里可以为每个分类添加额外的描述信息。查看下面的高级标签页面，了解更多。\n","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/tags/","section":"标签","summary":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示","title":"标签","type":"tags"},{"content":" 软件\u0026amp;数据工程师，喜欢周深和大熊猫渝爱，热衷于健身和寻找真菌。 享受生活中的每一个小乐趣。 Hi, 我最近以优异的成绩完成了计算机科学理学硕士学位。在过去的几年里，我积累了丰富的软件工程师经验。我的专长是软件开发、数据分析和机器学习，在 Java, Python 等技术和 AWS 等云服务方面拥有丰富的实践经验。\n我的主要项目之一是创新了一项专利，这是一个自动化数据收集系统（跨多个数据库），它极大地提高了效率，减少了 90% 的人工劳动，并将数据提取率从低于 10% 提高到 80% 以上。\n","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/","section":"欢迎来到 Yuzhen's Blog","summary":"软件\u0026amp;数据工程师，喜欢周深和大熊猫渝爱，热衷于健身和","title":"欢迎来到 Yuzhen's Blog","type":"page"},{"content":" 热爱分享 ","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/tech/","section":"技术","summary":"热爱分享","title":"技术","type":"tech"},{"content":"","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","section":"标签","summary":"","title":"问题解决","type":"tags"},{"content":" 问题描述: # 这几天一直在用github来配置和更新博客，但是今天发现github上的contributions并没有我的提交记录。其次相关repository的commits显示如下\n原因: # 电脑git是用homebrew安装的，mac并没有进行本地配置，直接用终端把本地文件push到仓库中了。\n因为本地的git默认的user.name和user.email并不是github中的，而是本机的。所以在此期间的commit都是默认本机的。\n1. 查看commit记录. # $git log 虽然在往你的github仓库中push，但是用户名和邮箱却不是你，而是系统默认的pc用户。\n2. 查看自己的git所属 # $git config user.name $git config user.email 查不出的结果应该是为空。所以github贡献统计的根本就不是你的账户。\n解决办法: # 1. 配置本地git # $git config --global user.name \u0026#34;github accountname\u0026#34; $git config --global user.email \u0026#34;github@xx.com\u0026#34; 这里只是在git config 后边添加上了要更改的内容即可，--global参数指的是全局，也就是本地的所有仓库，如果不加就是单个仓库。\n修改好后，以后的commit就是你的账户了，就能被统计贡献。\n2. 修改commit和push历史 # 修改所有的commit和push历史，把之前所有用默认账户的commit都归为真正的账户名下。\n# AUTHOR记录的是这次修改的作者信息 $git filter-branch -f --env-filter \u0026#39; if [ \u0026#34;$GIT_AUTHOR_NAME\u0026#34; = \u0026#34;oldName\u0026#34; ] then export GIT_AUTHOR_NAME=\u0026#34;newName\u0026#34; export GIT_AUTHOR_EMAIL=\u0026#34;newEmail\u0026#34; fi \u0026#39; HEAD #COMMITTER是这次提交的用户信息 $git filter-branch -f --env-filter \u0026#39; if [ \u0026#34;$GIT_COMMITTER_NAME\u0026#34; = \u0026#34;oldName\u0026#34; ] then export GIT_COMMITTER_NAME=\u0026#34;newName\u0026#34; export GIT_COMMITTER_EMAIL=\u0026#34;newEmail\u0026#34; fi \u0026#39; HEAD 注意两者区别，\n如果自己写自己提交，那么两者都是你。\n有的项目有的人并没有commit权限，所以修改完之后需要交给有权限的人提交，这样你是AUTHOR并不是COMMITTER\n如果修改成功提示:Ref \u0026lsquo;refs/heads/master\u0026rsquo; was rewritten\n如果修改失败提示:Ref \u0026lsquo;refs/heads/master\u0026rsquo; is unchanged这里可能是因为填写的oldName并没有找到。\n如果无差别修改的话去掉if..fi\n$git filter-branch -f --env-filter \u0026#34; GIT_AUTHOR_NAME=\u0026#39;newName\u0026#39;; GIT_AUTHOR_EMAIL=\u0026#39;newEmail\u0026#39;; GIT_COMMITTER_NAME=\u0026#39;newName\u0026#39;; GIT_COMMITTER_EMAIL=\u0026#39;newEmail\u0026#39; \u0026#34; HEAD 3. push到远程仓库 # 使用强制push的方法： $git push -u origin master -f 这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n我这里只是自己写的博客，所以就直切全部强制覆盖掉了。\npush前先将远程repository修改pull下来 $git pull origin main $git push -u origin main 若不想merge远程和本地修改，可以先创建新的分支： $git branch [name] $git push -u origin [name] 最终修改成功🎉\n","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/tech/github_contribution_issues/","section":"技术","summary":"问题描述: # 这几天一直在用github来配置和更新博客，但是","title":"问题解决——本地提交至GitHub仓库，贡献不显示","type":"tech"},{"content":"","date":"23 September 2024","externalUrl":null,"permalink":"/tags/config/","section":"Tags","summary":"","title":"Config","type":"tags"},{"content":"","date":"23 September 2024","externalUrl":null,"permalink":"/tags/docs/","section":"Tags","summary":"","title":"Docs","type":"tags"},{"content":"我们希望 Hugo 生成的静态网站能通过 GitHub Pages 服务进行托管，而无需自己维护服务，更稳定、安全，因此我们需要上传 Hugo 生成的静态网页文件至 GitHub Page 项目仓库。\n1. 准备 GitHub 仓库 # 登录后，点击右上角，出现下拉菜单，点击 Your repositories 进入页面\n点击 New\n进入 Creat a new repository 页面\n创建两个新的仓库，一个命名为 username.github.io，用来托管public的站点, username 替换为你的 GitHub 用户名。另外创建一个，可以叫my_site_source的private仓库。通常情况下创建一个就可以,my_site_source的目的是存储原始文件，作为容灾备份。\n例如，如果你的 GitHub 用户名是 yuzhencode，则仓库名为 yuzhencode.github.io。\n初始化仓库时，勾选 Initialize this repository with a README，可以方便后续推送代码。\n2. 本地生成 Hugo 静态网页 # 确保你的 hugo.toml 或配置文件中有正确的 baseURL，例如： baseURL = \u0026#34;https://username.github.io/\u0026#34; # 将 `username` 替换为你的 GitHub 用户名。 生成静态网页： 打开你的博客项目目录，运行以下命令生成静态网页： $hugo 生成的静态文件将位于项目的 public/ 文件夹中。 3. 将生成的文件上传到 GitHub 仓库 # 初始化 Git： 如果你的项目还没有 Git 仓库，进入你的项目根目录，运行：\n$git init 添加 GitHub 仓库为远程仓库： 将 GitHub 仓库添加为远程仓库：\n$git remote add origin https://github.com/yuzhencode/yuzhencode.github.io.git # 将本地目录链接到远程服务器的代码仓库 添加 public/ 目录的内容到 Git： 进入生成的 public/ 文件夹：\n$cd public 初始化 Git 并添加文件：\n$git init $git add . $git commit -m \u0026#34;Initial commit - Hugo static files\u0026#34; 推送到 GitHub： 将本地的 public/ 文件推送到 GitHub 仓库：\n$git branch -M main $git push -u origin main 4. 配置 GitHub Pages # 启用 GitHub Pages： 在 GitHub 项目的 Settings 页面的左侧菜单中找到 Pages。 在 Source 下拉框中，选择 main 分支，并指定 /(root) 作为发布目录。 保存设置后，GitHub 将开始构建并托管你的 Hugo 博客。 访问你的博客： GitHub Pages 部署完成后，你可以通过 https://your-username.github.io/ 访问你的博客。 5. 本地更新与部署 # 每次在 Hugo 中更新内容后，重新生成 public/ 文件，并重复步骤 4 来推送更新：\n$hugo $cd public $git add . $git commit -m \u0026#34;Update site\u0026#34; $git push -u origin main 这样，你的 Hugo 静态网站就会保持同步，并成功部署到 GitHub Pages 上。\n6.容灾备份 # 像步骤3执行同样的命令，不过在站点根目录或上一层建立一个my-site-source目录下进行。\n初始化 Git： 运行：\n$git init 添加 GitHub 仓库为远程仓库： $git remote add origin https://github.com/yuzhencode/yuzhenblog-source.git # 将本地目录链接到远程服务器的代码仓库 添加文件，推送到 GitHub 仓库： $git add . $git commit -m \u0026#34;Initial commit - Hugo static files\u0026#34; $git push -u origin main 定期更新 $git add . $git commit -m \u0026#34;Update site\u0026#34; $git push -u origin main 至此，Hugo + Blowfish + GitHub 支持下的博客就大功告成啦🎉\n","date":"2024-09-23","externalUrl":null,"permalink":"/zh-cn/tech/publishing_with_github_pages/","section":"技术","summary":"我们希望 Hugo 生成的静态网站能通过 GitHub Pages 服务进行托管，而无需自己维","title":"搭建个人博客——3.GitHub Pages 发布博客","type":"tech"},{"content":"","date":"2024-09-23","externalUrl":null,"permalink":"/zh-cn/tags/%E9%85%8D%E7%BD%AE/","section":"标签","summary":"","title":"配置","type":"tags"},{"content":"","date":"2024-09-23","externalUrl":null,"permalink":"/zh-cn/tags/%E6%96%87%E6%A1%A3/","section":"标签","summary":"","title":"文档","type":"tags"},{"content":" 1. 站点配置 # 上文拷贝 exampleSite 后，站点文件夹结构变成： my-site/ ├── archetypes/ │ └── default.md ├── assets/ # 存放由 Hugo Pipes 处理的文件 ├── config/ # 存放Blowfish 主题的配置文件 ├── content/ # 存放博客内容的 markdown 文件 ├── data/ # 存放由 Hugo 处理的数据文件 ├── i18n/ # 多语言支持 ├── layouts/ # 存放布局文件 ├── static/ # 存放静态文件如图片、CSS 和 JS 文件 ├── themes/ # 存放不同主题 └── hugo.toml \u0026lt;\u0026ndash; 站点配置文件 站点配置 # 相比之前，新增了 config 文件夹，里面包含默认配置文件。config/_default/ 文件夹中包含了以下配置文件：\nconfig/_default/ ├─ hugo.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml ├─ module.toml └─ params.toml 站点配置通过 config/_default/hugo.toml 文件管理，Blowfish 主题使用的所有设置如下所示。以下是配置项的简要说明：\nName Default Description My Value theme \u0026quot;blowfish\u0026quot; 主题名称。Hugo Modules 不需要此配置 baseURL Not set 网站根URL https://yuzhencode.github.io/ 为了使 Blowfish 更灵活，每个站点至少要创建一个语言配置文件。Blowfish 默认提供 config/_default/languages.en.toml 文件支持英语。\nGlobal 设置 # Name Default Description My Value title \u0026quot;Blowfish\u0026quot; 网站标题，显示在页头和页脚 Yuzhen Blog Params 设置 # Name Default Description My Value params.logo Not set 网站 logo 文件的相对路径，文件应位于 assets/ 文件夹中，建议使用 2 倍分辨率 img/your-site-logo.png params.description Not set 网站描述，显示在网站元数据中 Author 设置 # Name Default Description My Value params.author.name Not set 作者名字，显示在文章页和主页 Yuzhen params.author.image Not set 作者头像的路径，建议使用 1:1 的宽高比 img/author.jpeg params.author.bio Not set Markdown 格式的作者简介，显示在文章底部 customisation params.author.links Not set 作者的相关链接，如 GitHub 等，支持 SVG 图标 customisation 更多细节请查看 Blowfish 官方文档。\n2. 一次性生成适用于多个浏览器、多个平台的图标 # 每个平台有不同的图标设计要求，因此不能在所有地方使用相同的图片。首先选择你自己的图标图像，然后使用 RealFaviconGenerator 网站根据不同平台生成适合的图标。\n你可能需要以下格式的图标：\napple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) favicon.ico browserconfig.xml site.webmanifest 将生成的图片和代码放在博客根目录的 /static 目录下即可，在本地使用 hugo server 预览效果。部署到 GitHub Pages 后，可能需要一些时间才能生效。 3. 设置菜单 # Blowfish 提供两个菜单：main 菜单显示在网站头部，footer 菜单显示在页面底部。配置文件位于 menus.en.toml 中，若使用多语言功能，需重命名为对应语言的代码。\n# config/_default/menus.toml [[main]] name = \u0026#34;ABOUT ME\u0026#34; pageRef = \u0026#34;docs/about-me\u0026#34; weight = 10 [[main]] name = \u0026#34;PROJECTS\u0026#34; pageRef = \u0026#34;projects\u0026#34; weight = 20 [[main]] name = \u0026#34;POSTS\u0026#34; weight = 30 [[main]] name = \u0026#34;TECH\u0026#34; parent = \u0026#34;POSTS\u0026#34; pageRef = \u0026#34;tech\u0026#34; weight = 40 [[main]] name = \u0026#34;LIFE\u0026#34; parent = \u0026#34;POSTS\u0026#34; pageRef = \u0026#34;life\u0026#34; weight = 50 [[main]] identifier = \u0026#34;github\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/yuzhencode\u0026#34; weight = 400 [[footer]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 10 [[footer]] name = \u0026#34;Authors\u0026#34; pageRef = \u0026#34;authors\u0026#34; weight = 20 4. 主题参数 # Blowfish 提供了大量参数来控制主题功能，这些参数位于 config/_default/params.toml 文件中。\n全局参数 # Name Default Description colorScheme \u0026quot;blowfish\u0026quot; 颜色方案，例如 avocado、fire、ocean 等 defaultAppearance \u0026quot;light\u0026quot; 默认主题外观，可以是 light 或 dark enableSearch false 启用搜索功能 页头设置 # Name Default Description header.layout \u0026quot;basic\u0026quot; 页头布局，支持 basic、fixed 等 页脚设置 # Name Default Description footer.showMenu true 显示页脚菜单 footer.showScrollToTop true 显示返回顶部按钮 主页设置 # Name Default Description homepage.layout \u0026quot;profile\u0026quot; 主页布局，例如 page、hero 等 homepage.showRecent false 是否显示最新文章列表 文章页设置 # Name Default Description article.showDate true 是否显示文章日期 article.showLikes false 是否显示文章点赞数（需集成 Firebase） 还有更多的页面列表、分类法、术语等设置，请参考 Blowfish 配置文档。\n5. 新建博客文章 # 由exampleSite中我们可以看到Blowfish已经给出模版文章，预览请点击链接，将exampleSite/content/guides/template文件夹copy至my-site/archetypes/下，并rename为deault，同时你可根据自己的需求更改模版文件。\n然后你可以通过以下命令创建一篇新的博客文章：\n$hugo new tech/test Content dir \u0026#34;yuzhenblog-source/yuzhen/content/tech/test\u0026#34; created 创建文件夹时可能遇到多语言设置的错误，删除 index.it.md 和 index.ja.md 文件后可以解决问题。更多讨论请参考 Hugo Issue 9204。如果你有更好的解决方法欢迎告知，以下是报错信息\npanic: [BUG] no Page found for \u0026#34;yuzhenblog-source/yuzhen/content/tech/test/index.it.md\u0026#34; goroutine 1 [running]: github.com/gohugoio/hugo/create.(*contentBuilder).applyArcheType(0x140009d4a80, {0x14000d139d0, 0x65}, {0x1066a06e0, 0x14000ad9b40}) github.com/gohugoio/hugo/create/content.go:273 +0x2b8 github.com/gohugoio/hugo/create.(*contentBuilder).buildDir(0x140009d4a80) github.com/gohugoio/hugo/create/content.go:179 +0x51c github.com/gohugoio/hugo/create.NewContent.func1() github.com/gohugoio/hugo/create/content.go:92 +0x268 github.com/gohugoio/hugo/create.NewContent(0x14000b608c0, {0x0, 0x0}, {0x16d33ba21, 0x9}, 0x0) github.com/gohugoio/hugo/create/content.go:106 +0x480 github.com/gohugoio/hugo/commands.newNewCommand.func1({0x0?, 0x0?}, 0x0?, 0x140008ad040, {0x140009b0170, 0x0?, 0x0?}) github.com/gohugoio/hugo/commands/new.go:60 +0x160 github.com/gohugoio/hugo/commands.(*simpleCommand).Run(0x0?, {0x1066956a8?, 0x107ad9600?}, 0x0?, {0x140009b0170?, 0x141f8f4500000000?, 0x1400087f9f8?}) github.com/gohugoio/hugo/commands/commandeer.go:608 +0x48 github.com/bep/simplecobra.(*Commandeer).compile.func1(0x140005e5900?, {0x140009b0170?, 0x4?, 0x10483e075?}) github.com/bep/simplecobra@v0.4.0/simplecobra.go:113 +0x54 github.com/spf13/cobra.(*Command).execute(0x1400098b208, {0x140009b0130, 0x1, 0x1}) github.com/spf13/cobra@v1.8.0/command.go:983 +0x840 github.com/spf13/cobra.(*Command).ExecuteC(0x14000537508) github.com/spf13/cobra@v1.8.0/command.go:1115 +0x344 github.com/spf13/cobra.(*Command).ExecuteContextC(...) github.com/spf13/cobra@v1.8.0/command.go:1048 github.com/bep/simplecobra.(*Exec).Execute(0x14000376cc0, {0x1066956a8?, 0x107ad9600?}, {0x14000333a80?, 0x106226f80?, 0x102b10a9c?}) github.com/bep/simplecobra@v0.4.0/simplecobra.go:155 +0xb4 github.com/gohugoio/hugo/commands.Execute({0x1400011a490, 0x2, 0x2}) github.com/gohugoio/hugo/commands/commandeer.go:67 +0x284 main.main() github.com/gohugoio/hugo/main.go:25 +0x70 一个有着个人特色的网站创建成功，下一篇将讲解如何使用GitHub Pages发布博客\n","date":"2024-09-20","externalUrl":null,"permalink":"/zh-cn/tech/blowfish_customization/","section":"技术","summary":"1. 站点配置 # 上文拷贝 exampleSite 后，站点文件夹结构变成： my-site/ ├── archetypes/ │ └","title":"搭建个人博客——2. Blowfish主题自定义","type":"tech"},{"content":" 为什么重建 # 最近在备考AWS SAA和通过开发side project学习一些新技术，想要写文章记录。由于之前博客的全部文件在国内的旧电脑里，GitHub仓库只有public内容无法还原，于是决定重启blog，作为记录和写作的练习。\n为了避免又一次陷入泥潭，这次的方案要满足以下几个需求：\n支持md，并且要保证将来可以方便的迁移 可实现服务托管 源文件和站点文件都能够完全掌控 框架要有良好的社区支持 不会因为换电脑等原因丢失数据 Hugo+GitHub Pages的解决方案更能满足我的需求，后续会结合notion+GitHub Actions进行持续部署\n本地搭建 # 下面就开始Hugo的探索之旅。官网说明文档非常详细，以下仅为个人记录。\n1.hugo环境 # 非常简单的安装。我使用的是 macOS + homebrew。\n#打开Terminal $brew install hugo 完成后，可使用以下命令进行验证：\n$hugo version 2.Git环境 # 安装同样非常简单\n$brew install git #同样的，使用命令验证是否安装成功 $git version 3.创建站点 Create a site # 要创建一个新的web站点，可通过执行以下命令来实现。\n$hugo new site my-site # my-site可替换为自定义博客名字，例如YuzhenBlog hugo便在当前文件路径下生成自定义site\n此时站点就已创建完成。\n其中 my-site/ ├── archetypes/ │ └── default.md ├── assets/ # 存放被 Hugo Pipes 处理的文件 ├── content/ # 存放markdown文件作为博文内容 ├── data/ # 存放 Hugo 处理的数据 ├── i18n/ ├── layouts/ # 存放布局文件 ├── static/ # 存放静态文件 图片 CSS JS文件 ├── themes/ # 存放不同的主题 └── hugo.toml \u0026lt;\u0026ndash; site configuration 详细说明请参考 Directory structure\n4.配置Blowfish主题 # 参考主题文档\n4.1 下载 Blowfish 主题\n有多种方法可以将 Blowfish 主题安装在 Hugo 站点中。\n手动文件复制 使用 Git 子模块安装 (推荐) 如果你不确定用哪一个，请直接选择 Git 子模块的方式。我们先从本地无需Git环境的手动方法说起。\n手动文件复制\n下载最新的主题源码。从 Github 下载 解压缩, 并将文件夹重命名为 blowfish，将其移动到你的 Hugo 项目根目录下的 themes/ 目录中。 然后修改**hugo.toml** 使用 Git 子模块安装\n这个方法可以保证主题简单且快速地安装和更新。除了 Hugo，你还需要确保本地机器安装了 Git。\n进入你刚才创建的网站目录 my-site，初始化一个新的 git 仓库并将 Blowfish 添加为子模块。\ncd my-site git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 然后修改**hugo.toml**\n使用 Hugo 模块安装 本文暂不说明，可参考链接 4.2 接下来修改hugo.toml ，在文件中添加 theme = \u0026quot;blowfish\u0026quot;。然后输入以下命令启动服务\n$hugo server #启动服务并根据提示打开网站预览 此时便已配置blowfish主题成功。\n4.3 exampleSite\n也许你会疑惑为什么页面跟主题大相径庭，是因为其他背景图片、站点logo、相关样式、内容文本都还没有。最简单的方式是复制my-site/themes/blowfish/exampleSite路径下的所有文件到站点根目录，也就是my-site/路径下。重启服务，便可获得以下预览，接下来就可以开始你的自定义之旅啦。\nreference\nHugo Documentation https://gohugo.io/documentation/\nBlowfish https://blowfish.page/\n","date":"2024-08-27","externalUrl":null,"permalink":"/zh-cn/tech/hugo_blog_setup/","section":"技术","summary":"为什么重建 # 最近在备考AWS SAA和通过开发side proj","title":"搭建个人博客——1. 安装hugo, Git, 配置Blowfish主题","type":"tech"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/tags/aboutme/","section":"Tags","summary":"","title":"Aboutme","type":"tags"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。\u0026#x1f680;\n你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\n","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/tags/advanced/","section":"标签","summary":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页","title":"高级","type":"tags"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/tags/%E5%85%B3%E4%BA%8E%E6%88%91/","section":"标签","summary":"","title":"关于我","type":"tags"},{"content":" 简介 # 于伯明翰大学计算机科学专业硕士毕业。非常幸运地在Peter Hancox博士的指导下完成了我的论文，题目是《Yelp评论的细粒度情感分析与多类不平衡数据的探索》。在过去的几年里，我积累了丰富的软件工程师经验。我的专长是软件开发、数据分析和机器学习，在 Java, Python 等技术和 AWS 等云服务方面拥有丰富的实践经验。\n工作之余，我喜欢探索城市和听歌手周深的歌曲。我还运营着一个关于这位歌手的数据库查询网站，供一个大约40人的粉丝群体使用。这个网站包含大约16万条数据，使用MySQL数据库、Python爬虫技术和Flask框架开发。\n兴趣 # 网站开发 人工智能 健身🏋️ 探索大自然，包括但不限于：徒步⛰️、寻找蘑菇🍄 教育背景 # 计算机科学硕士，2022年（Distinction）\n伯明翰大学\n检测与控制技术及仪器学士，2017年\n山东大学\n","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/docs/%E5%85%B3%E4%BA%8E%E6%88%91/","section":"文档","summary":"简介 # 于伯明翰大学计算机科学专业硕士毕业。非常幸运地在Pet","title":"关于我","type":"docs"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/life/","section":"生活","summary":"","title":"生活","type":"life"},{"content":" ","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/docs/","section":"文档","summary":"","title":"文档","type":"docs"},{"content":" 展示项目 待更新。。。 ","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/projects/","section":"项目","summary":"展示项目 待更新。。。","title":"项目","type":"projects"}]