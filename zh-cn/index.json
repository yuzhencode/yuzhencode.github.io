


[{"content":" 为什么重建 # 最近在备考AWS SAA和通过开发side project学习一些新技术，想要写文章记录。由于之前博客的全部文件在国内的旧电脑里，GitHub仓库只有public内容无法还原，于是决定重启blog，作为记录和写作的练习。\n为了避免又一次陷入泥潭，这次的方案要满足以下几个需求：\n支持md，并且要保证将来可以方便的迁移 可实现服务托管 源文件和站点文件都能够完全掌控 框架要有良好的社区支持 不会因为换电脑等原因丢失数据 Hugo+GitHub Pages的解决方案更能满足我的需求，后续会结合notion+GitHub Actions进行持续部署\n本地搭建 # 下面就开始Hugo的探索之旅。官网说明文档非常详细，以下仅为个人记录。\n1.hugo环境 # 非常简单的安装。我使用的是 macOS + homebrew。\n#打开Terminal $brew install hugo 完成后，可使用以下命令进行验证：\n$hugo version 2.Git环境 # 安装同样非常简单\n$brew install git #同样的，使用命令验证是否安装成功 $git version 3.创建站点 Create a site # 要创建一个新的web站点，可通过执行以下命令来实现。\n$hugo new site my-site # my-site可替换为自定义博客名字，例如YuzhenBlog hugo便在当前文件路径下生成自定义site\n此时站点就已创建完成。\n其中 my-site/ ├── archetypes/ │ └── default.md ├── assets/ # 存放被 Hugo Pipes 处理的文件 ├── content/ # 存放markdown文件作为博文内容 ├── data/ # 存放 Hugo 处理的数据 ├── i18n/ ├── layouts/ # 存放布局文件 ├── static/ # 存放静态文件 图片 CSS JS文件 ├── themes/ # 存放不同的主题 └── hugo.toml \u0026lt;\u0026ndash; site configuration 详细说明请参考 Directory structure\n4.配置Blowfish主题 # 参考主题文档\n4.1 下载 Blowfish 主题\n有多种方法可以将 Blowfish 主题安装在 Hugo 站点中。\n手动文件复制 使用 Git 子模块安装 (推荐) 如果你不确定用哪一个，请直接选择 Git 子模块的方式。我们先从本地无需Git环境的手动方法说起。\n手动文件复制\n下载最新的主题源码。从 Github 下载 解压缩, 并将文件夹重命名为 blowfish，将其移动到你的 Hugo 项目根目录下的 themes/ 目录中。 然后修改**hugo.toml** 使用 Git 子模块安装\n这个方法可以保证主题简单且快速地安装和更新。除了 Hugo，你还需要确保本地机器安装了 Git。\n进入你刚才创建的网站目录 my-site，初始化一个新的 git 仓库并将 Blowfish 添加为子模块。\ncd my-site git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 然后修改**hugo.toml**\n使用 Hugo 模块安装 本文暂不说明，可参考链接 4.2 接下来修改hugo.toml ，在文件中添加 theme = \u0026quot;blowfish\u0026quot;。然后输入以下命令启动服务\n$hugo server #启动服务并根据提示打开网站预览 此时便已配置blowfish主题成功。\n4.3 exampleSite\n也许你会疑惑为什么页面跟主题大相径庭，是因为其他背景图片、站点logo、相关样式、内容文本都还没有。最简单的方式是复制my-site/themes/blowfish/exampleSite路径下的所有文件到站点根目录，也就是my-site/路径下。重启服务，便可获得以下预览，接下来就可以开始你的自定义之旅啦。\nreference\nHugo Documentation https://gohugo.io/documentation/\nBlowfish https://blowfish.page/\n","date":"2024-08-27","externalUrl":null,"permalink":"/zh-cn/tech/install-hugo-git/","section":"技术","summary":"为什么重建 # 最近在备考AWS SAA和通过开发side proj","title":"搭建个人博客——1. 安装hugo, Git, 配置Blowfish主题","type":"tech"},{"content":" 1. 站点配置 # 上文拷贝 exampleSite 后，站点文件夹结构变成： my-site/ ├── archetypes/ │ └── default.md ├── assets/ # 存放由 Hugo Pipes 处理的文件 ├── config/ # 存放Blowfish 主题的配置文件 ├── content/ # 存放博客内容的 markdown 文件 ├── data/ # 存放由 Hugo 处理的数据文件 ├── i18n/ # 多语言支持 ├── layouts/ # 存放布局文件 ├── static/ # 存放静态文件如图片、CSS 和 JS 文件 ├── themes/ # 存放不同主题 └── hugo.toml \u0026lt;\u0026ndash; 站点配置文件 站点配置 # 相比之前，新增了 config 文件夹，里面包含默认配置文件。config/_default/ 文件夹中包含了以下配置文件：\nconfig/_default/ ├─ hugo.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml ├─ module.toml └─ params.toml 站点配置通过 config/_default/hugo.toml 文件管理，Blowfish 主题使用的所有设置如下所示。以下是配置项的简要说明：\nName Default Description My Value theme \u0026quot;blowfish\u0026quot; 主题名称。Hugo Modules 不需要此配置 baseURL Not set 网站根URL https://yuzhencode.github.io/ 为了使 Blowfish 更灵活，每个站点至少要创建一个语言配置文件。Blowfish 默认提供 config/_default/languages.en.toml 文件支持英语。\nGlobal 设置 # Name Default Description My Value title \u0026quot;Blowfish\u0026quot; 网站标题，显示在页头和页脚 Yuzhen Blog Params 设置 # Name Default Description My Value params.logo Not set 网站 logo 文件的相对路径，文件应位于 assets/ 文件夹中，建议使用 2 倍分辨率 img/your-site-logo.png params.description Not set 网站描述，显示在网站元数据中 Author 设置 # Name Default Description My Value params.author.name Not set 作者名字，显示在文章页和主页 Yuzhen params.author.image Not set 作者头像的路径，建议使用 1:1 的宽高比 img/author.jpeg params.author.bio Not set Markdown 格式的作者简介，显示在文章底部 customisation params.author.links Not set 作者的相关链接，如 GitHub 等，支持 SVG 图标 customisation 更多细节请查看 Blowfish 官方文档。\n2. 一次性生成适用于多个浏览器、多个平台的图标 # 每个平台有不同的图标设计要求，因此不能在所有地方使用相同的图片。首先选择你自己的图标图像，然后使用 RealFaviconGenerator 网站根据不同平台生成适合的图标。\n你可能需要以下格式的图标：\napple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) favicon.ico browserconfig.xml site.webmanifest 将生成的图片和代码放在博客根目录的 /static 目录下即可，在本地使用 hugo server 预览效果。部署到 GitHub Pages 后，可能需要一些时间才能生效。 3. 设置菜单 # Blowfish 提供两个菜单：main 菜单显示在网站头部，footer 菜单显示在页面底部。配置文件位于 menus.en.toml 中，若使用多语言功能，需重命名为对应语言的代码。\n# config/_default/menus.toml [[main]] name = \u0026#34;ABOUT ME\u0026#34; pageRef = \u0026#34;docs/about-me\u0026#34; weight = 10 [[main]] name = \u0026#34;PROJECTS\u0026#34; pageRef = \u0026#34;projects\u0026#34; weight = 20 [[main]] name = \u0026#34;POSTS\u0026#34; weight = 30 [[main]] name = \u0026#34;TECH\u0026#34; parent = \u0026#34;POSTS\u0026#34; pageRef = \u0026#34;tech\u0026#34; weight = 40 [[main]] name = \u0026#34;LIFE\u0026#34; parent = \u0026#34;POSTS\u0026#34; pageRef = \u0026#34;life\u0026#34; weight = 50 [[main]] identifier = \u0026#34;github\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/yuzhencode\u0026#34; weight = 400 [[footer]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 10 [[footer]] name = \u0026#34;Authors\u0026#34; pageRef = \u0026#34;authors\u0026#34; weight = 20 4. 主题参数 # Blowfish 提供了大量参数来控制主题功能，这些参数位于 config/_default/params.toml 文件中。\n全局参数 # Name Default Description colorScheme \u0026quot;blowfish\u0026quot; 颜色方案，例如 avocado、fire、ocean 等 defaultAppearance \u0026quot;light\u0026quot; 默认主题外观，可以是 light 或 dark enableSearch false 启用搜索功能 页头设置 # Name Default Description header.layout \u0026quot;basic\u0026quot; 页头布局，支持 basic、fixed 等 页脚设置 # Name Default Description footer.showMenu true 显示页脚菜单 footer.showScrollToTop true 显示返回顶部按钮 主页设置 # Name Default Description homepage.layout \u0026quot;profile\u0026quot; 主页布局，例如 page、hero 等 homepage.showRecent false 是否显示最新文章列表 文章页设置 # Name Default Description article.showDate true 是否显示文章日期 article.showLikes false 是否显示文章点赞数（需集成 Firebase） 还有更多的页面列表、分类法、术语等设置，请参考 Blowfish 配置文档。\n5. 新建博客文章 # 由exampleSite中我们可以看到Blowfish已经给出模版文章，预览请点击链接，将exampleSite/content/guides/template文件夹copy至my-site/archetypes/下，并rename为deault，同时你可根据自己的需求更改模版文件。\n然后你可以通过以下命令创建一篇新的博客文章：\n$hugo new tech/test Content dir \u0026#34;yuzhenblog-source/yuzhen/content/tech/test\u0026#34; created 创建文件夹时可能遇到多语言设置的错误，删除 index.it.md 和 index.ja.md 文件后可以解决问题。更多讨论请参考 Hugo Issue 9204。如果你有更好的解决方法欢迎告知，以下是报错信息\npanic: [BUG] no Page found for \u0026#34;yuzhenblog-source/yuzhen/content/tech/test/index.it.md\u0026#34; goroutine 1 [running]: github.com/gohugoio/hugo/create.(*contentBuilder).applyArcheType(0x140009d4a80, {0x14000d139d0, 0x65}, {0x1066a06e0, 0x14000ad9b40}) github.com/gohugoio/hugo/create/content.go:273 +0x2b8 github.com/gohugoio/hugo/create.(*contentBuilder).buildDir(0x140009d4a80) github.com/gohugoio/hugo/create/content.go:179 +0x51c github.com/gohugoio/hugo/create.NewContent.func1() github.com/gohugoio/hugo/create/content.go:92 +0x268 github.com/gohugoio/hugo/create.NewContent(0x14000b608c0, {0x0, 0x0}, {0x16d33ba21, 0x9}, 0x0) github.com/gohugoio/hugo/create/content.go:106 +0x480 github.com/gohugoio/hugo/commands.newNewCommand.func1({0x0?, 0x0?}, 0x0?, 0x140008ad040, {0x140009b0170, 0x0?, 0x0?}) github.com/gohugoio/hugo/commands/new.go:60 +0x160 github.com/gohugoio/hugo/commands.(*simpleCommand).Run(0x0?, {0x1066956a8?, 0x107ad9600?}, 0x0?, {0x140009b0170?, 0x141f8f4500000000?, 0x1400087f9f8?}) github.com/gohugoio/hugo/commands/commandeer.go:608 +0x48 github.com/bep/simplecobra.(*Commandeer).compile.func1(0x140005e5900?, {0x140009b0170?, 0x4?, 0x10483e075?}) github.com/bep/simplecobra@v0.4.0/simplecobra.go:113 +0x54 github.com/spf13/cobra.(*Command).execute(0x1400098b208, {0x140009b0130, 0x1, 0x1}) github.com/spf13/cobra@v1.8.0/command.go:983 +0x840 github.com/spf13/cobra.(*Command).ExecuteC(0x14000537508) github.com/spf13/cobra@v1.8.0/command.go:1115 +0x344 github.com/spf13/cobra.(*Command).ExecuteContextC(...) github.com/spf13/cobra@v1.8.0/command.go:1048 github.com/bep/simplecobra.(*Exec).Execute(0x14000376cc0, {0x1066956a8?, 0x107ad9600?}, {0x14000333a80?, 0x106226f80?, 0x102b10a9c?}) github.com/bep/simplecobra@v0.4.0/simplecobra.go:155 +0xb4 github.com/gohugoio/hugo/commands.Execute({0x1400011a490, 0x2, 0x2}) github.com/gohugoio/hugo/commands/commandeer.go:67 +0x284 main.main() github.com/gohugoio/hugo/main.go:25 +0x70 一个有着个人特色的网站创建成功，下一篇将讲解如何使用GitHub Pages发布博客\n","date":"2024-09-20","externalUrl":null,"permalink":"/zh-cn/tech/custom-theme/","section":"技术","summary":"1. 站点配置 # 上文拷贝 exampleSite 后，站点文件夹结构变成： my-site/ ├── archetypes/ │ └","title":"搭建个人博客——2. Blowfish主题自定义","type":"tech"},{"content":"我们希望 Hugo 生成的静态网站能通过 GitHub Pages 服务进行托管，而无需自己维护服务，更稳定、安全，因此我们需要上传 Hugo 生成的静态网页文件至 GitHub Page 项目仓库。\n1. 准备 GitHub 仓库 # 登录后，点击右上角，出现下拉菜单，点击 Your repositories 进入页面\n点击 New\n进入 Creat a new repository 页面\n创建两个新的仓库，一个命名为 username.github.io，用来托管public的站点, username 替换为你的 GitHub 用户名。另外创建一个，可以叫my_site_source的private仓库。通常情况下创建一个就可以,my_site_source的目的是存储原始文件，作为容灾备份。\n例如，如果你的 GitHub 用户名是 yuzhencode，则仓库名为 yuzhencode.github.io。\n初始化仓库时，勾选 Initialize this repository with a README，可以方便后续推送代码。\n2. 本地生成 Hugo 静态网页 # 确保你的 hugo.toml 或配置文件中有正确的 baseURL，例如： baseURL = \u0026#34;https://username.github.io/\u0026#34; # 将 `username` 替换为你的 GitHub 用户名。 生成静态网页： 打开你的博客项目目录，运行以下命令生成静态网页： $hugo 生成的静态文件将位于项目的 public/ 文件夹中。 3. 将生成的文件上传到 GitHub 仓库 # 初始化 Git： 进入生成的 public/ 文件夹，运行：\n$cd public $git init 添加 GitHub 仓库为远程仓库： 将 GitHub 仓库添加为远程仓库：\n$git remote add origin https://github.com/yuzhencode/yuzhencode.github.io.git # 将本地目录链接到远程服务器的代码仓库 添加 public/ 目录的内容到 Git： 添加文件：\n$git add . $git commit -m \u0026#34;Initial commit - Hugo static files\u0026#34; 推送到 GitHub： 将本地的 public/ 文件推送到 GitHub 仓库：\n$git branch -M main $git push -u origin main 4. 配置 GitHub Pages # 启用 GitHub Pages： 在 GitHub 项目的 Settings 页面的左侧菜单中找到 Pages。 在 Source 下拉框中，选择 main 分支，并指定 /(root) 作为发布目录。 保存设置后，GitHub 将开始构建并托管你的 Hugo 博客。 访问你的博客： GitHub Pages 部署完成后，你可以通过 https://your-username.github.io/ 访问你的博客。 5. 本地更新与部署 # 每次在 Hugo 中更新内容后，重新生成 public/ 文件，并重复步骤 4 来推送更新：\n$hugo $cd public $git add . $git commit -m \u0026#34;Update site\u0026#34; $git push -u origin main 这样，你的 Hugo 静态网站就会保持同步，并成功部署到 GitHub Pages 上。\n6.容灾备份 # 像步骤3执行同样的命令，不过在站点根目录或上一层建立一个my-site-source目录下进行。\n初始化 Git： 运行：\n$git init 添加 GitHub 仓库为远程仓库： $git remote add origin https://github.com/yuzhencode/yuzhenblog-source.git # 将本地目录链接到远程服务器的代码仓库 添加文件，推送到 GitHub 仓库： $git add . $git commit -m \u0026#34;Initial commit - Hugo static files\u0026#34; $git push -u origin main 定期更新 $git add . $git commit -m \u0026#34;Update site\u0026#34; $git push -u origin main 至此，Hugo + Blowfish + GitHub 支持下的博客就大功告成啦🎉\n","date":"2024-09-23","externalUrl":null,"permalink":"/zh-cn/tech/deploy-github-pages/","section":"技术","summary":"我们希望 Hugo 生成的静态网站能通过 GitHub Pages 服务进行托管，而无需自己维","title":"搭建个人博客——3.GitHub Pages 发布博客","type":"tech"},{"content":"部署在 GitHub Pages 上的个人博客已经搭建一段时间，一直使用的是 username.github.io 默认域名。前不久终于在 Tencent Cloud 以不到 80 块的价格买了 10 年的域名。在网上搜索了部分 GitHub 自定义域名的文章后，发现非常简单，操作几步即可完成。\n首先注册一个域名 # 网上有很多域名注册商，例如 GoDaddy、Namecheap。很多云服务商、CDN 服务提供商也提供该项功能，像 AWS、GCP、Tencent Cloud、Cloudflare 等。本文将基于 Tencent Cloud 进行详细讲解。\n实名认证\n登录 https://cloud.tencent.com/，通过 控制台-域名注册-信息模版-新建模版，提交后大概 10 分钟即审核成功。\n域名注册购买\n在 控制台-域名注册-概览 中输入域名查询，或选择推荐的域名，根据提示购买即可。完成后查看 控制台-域名注册-我的域名，即可出现该域名记录。\n其次在仓库里添加 CNAME 文件 # 你可以选择以下任一操作来绑定你的域名：\n操作一：直接添加 CNAME 文件并在文件中填写绑定的域名。文件里填写要绑定的主域名，不要包含 http:// 和 www。\n操作二：点击你的博客仓库，进入设置，找到 Custom domain，添加域名后保存即可。\n最后添加 A 记录指向 GitHub 博客 IP 地址 # 打开 terminal，ping 你的 GitHub 博客地址 username.github.io 得到一个 IP 地址。\n在 我的域名-解析 中添加两个 A 记录，记录值为上一步骤得到的 IP 地址，主机记录一个为 “www”，另一个为 “@”，这样通过 yourblog.com 和 www.yourblog.com 都能访问到你的博客。请等待 DNS 配置生效，通常在 10 分钟内即可完成。\n额外提示 # HTTPS 配置：一旦域名成功绑定，记得在 GitHub Pages 的设置中启用 HTTPS，确保网站的安全性。 定期检查 DNS 记录：如果你发现网站无法访问，可以检查 DNS 设置，确保没有错误。 博客内容管理：定期更新博客内容，保持活跃，提高访客的回访率。 通过上述步骤，你可以成功将自己的域名绑定到 GitHub Pages 上，提升个人博客的专业性和可访问性。如有其他相关问题或需要进一步帮助，欢迎随时联系我！\n","date":"2024-10-07","externalUrl":null,"permalink":"/zh-cn/tech/custom-domain/","section":"技术","summary":"部署在 GitHub Pages 上的个人博客已经搭建一段时间，一直使用的是 username.github.io 默认域","title":"搭建个人博客——4. GitHub Pages 绑定个人域名","type":"tech"},{"content":"","date":"9 October 2024","externalUrl":null,"permalink":"/tags/automation/","section":"Tags","summary":"","title":"Automation","type":"tags"},{"content":"","date":"9 October 2024","externalUrl":null,"permalink":"/tags/data-engineering/","section":"Tags","summary":"","title":"Data Engineering","type":"tags"},{"content":"","date":"2024-10-09","externalUrl":null,"permalink":"/zh-cn/tags/etl/","section":"标签","summary":"","title":"ETL","type":"tags"},{"content":"","date":"9 October 2024","externalUrl":null,"permalink":"/tags/patent/","section":"Tags","summary":"","title":"Patent","type":"tags"},{"content":"","date":"2024-10-09","externalUrl":null,"permalink":"/zh-cn/tags/yuzhen/","section":"标签","summary":"","title":"Yuzhen","type":"tags"},{"content":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\n在这里可以为每个分类添加额外的描述信息。查看下面的高级标签页面，了解更多。\n","date":"2024-10-09","externalUrl":null,"permalink":"/zh-cn/tags/","section":"标签","summary":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示","title":"标签","type":"tags"},{"content":" 软件\u0026amp;数据工程师，喜欢周深和大熊猫渝爱。 享受生活中的每一个小乐趣。🏋️\u0026amp;⛰️\u0026amp;🍄 Hi, 我最近以优异的成绩完成了计算机科学理学硕士学位。在过去的几年里，我积累了丰富的软件工程师经验。我的专长是软件开发、数据分析和机器学习，在 Java, Python 等技术和 AWS 等云服务方面拥有丰富的实践经验。\n我的主要项目之一是创新了一项专利，这是一个自动化数据收集系统（跨多个数据库），它极大地提高了效率，减少了 90% 的人工劳动，并将数据提取率从低于 10% 提高到 80% 以上。\n09月 05日, 2024: AWS Certified Solutions Architect – Associate ","date":"2024-10-09","externalUrl":null,"permalink":"/zh-cn/","section":"欢迎来到 Yuzhen's Blog","summary":"软件\u0026amp;数据工程师，喜欢周深和大熊猫渝爱。 享受生活中的","title":"欢迎来到 Yuzhen's Blog","type":"page"},{"content":"随着企业数据量的增长，管理和整合多种数据库成为了一大挑战。为了解决这一问题，专利 CN111339081A 提出了 “自动收集异构数据库表目录的方法和系统” ，通过高度自动化的解决方案，提升数据提取效率高达 70%，并 减少人工部署和验证时间 90%，大幅优化企业的数据管理流程。这项技术不仅能显著提高 ETL（Extract, Transform, Load）流程的效率，还通过智能化的自动监控，彻底简化了数据整合与验证的工作。\n专利背景 # 在现代企业中，数据通常分布在多种数据库中。由于数据结构和类型的差异，信息的收集和整合过程繁琐且耗时。该专利旨在通过自动化技术，高效从不同数据库系统中收集表目录信息，显著优化数据提取和分析流程。\n专利概述 # 专利 CN111339081A 提出了一个自动化的方法，能够从这些异构数据库中高效收集基本信息。该方法的主要步骤包括：\n数据收集：系统自动收集各个数据库的基本信息，生成数据库表的初步列表。 数据分析：对收集到的信息进行分析，以识别数据之间的关系。 监控数据质量指标：实时监控数据质量指标，以快速响应问题，保障数据分析的可靠性。 Data Tool 使用：利用 Pentaho-Kettle 和 Python 进行数据的提取、转化和加载，将提取到的数据流向数据仓库，为业务使用提供支持。 预测建模：基于收集到的数据，使用 Python 开发的算法进行预测建模，优化计算出下一次执行提取的顺序，从而提高数据提取的效率。 CI/CD 流程：开发过程中，利用 Jenkins 等工具自动化数据管道的测试和部署，提高开发效率。 定期备份与恢复：自动化数据备份和恢复流程，确保数据安全性与可用性，防止数据丢失。 主要优势 # 提高效率：通过自动化的数据收集，显著提高了在不同数据库环境中管理数据的效率，减少了人工干预。 增强管理：提供了一个结构化的视图，使企业能够更好地了解各类数据的存储情况，并优化数据处理流程。 优化建议 # 经过持续学习和项目实践，我认为该项目在实际生产应用中有一些可以优化的地方。\n数据架构设计\n数据湖与数据仓库结合：考虑采用数据湖（如 AWS S3、Azure Data Lake Storage、GCP Cloud Storage ）与数据仓库（如 Redshift、Azure Synapse、BigQuery ）相结合的架构，以支持多种数据处理需求，带来以下优势：\n灵活性：数据湖支持多种格式（如结构化、半结构化和非结构化数据），使企业能够灵活处理不同类型的数据。数据仓库则专注于高性能的结构化数据查询，适合业务分析。 成本效益：使用数据湖存储大量原始数据，企业可以减少数据存储成本，特别是在处理大规模数据时。相比之下，数据仓库可用于高频次、低延迟的数据分析，提供更快的查询性能。 数据整合：通过数据湖，可以将来自多个来源的数据（如 IoT 设备、社交媒体、日志文件等）集中存储，从而提供一个统一的数据源，支持后续的数据分析和挖掘。 支持实时分析：结合数据湖和数据仓库架构，可以实现实时数据处理。数据湖中的流数据可通过数据仓库进行实时分析，帮助企业快速做出业务决策。 数据治理与合规性：数据湖和数据仓库结合可以更好地管理数据的生命周期，确保数据的安全性和合规性，同时提供访问控制和审计功能。 增强数据科学能力：数据湖可以存储大量的历史数据，供数据科学团队进行机器学习和深度学习模型训练，而数据仓库则支持更高效的数据分析。 通过结合数据湖与数据仓库的架构，企业能够更好地应对不断变化的数据需求，提高数据管理的灵活性和效率。\n数据ETL/ELT流程优化\n使用现代 ETL 工具：采用 Apache Airflow、DBT 等现代工具进行数据管道的管理和监控，确保数据的透明性和可追溯性。\n任务调度方面，可以考虑使用 Apache Airflow 代替传统的 Linux cron 作业。Airflow 具备以下优势： 可视化和监控：现代 ETL 工具通常提供用户友好的界面，允许团队可视化数据流和任务状态，便于监控和管理数据管道的运行。 任务依赖管理：Apache Airflow 支持复杂的任务依赖关系，可以确保任务按特定顺序执行，这在处理复杂的 ETL 流程时至关重要。 重试机制：Airflow 提供内置的重试机制，可以在任务失败时自动重新执行，提高了任务的可靠性。 灵活性与扩展性：Airflow 允许用户通过代码定义数据管道，便于版本控制和快速迭代，同时也支持与多种数据源和目标的集成。 动态调度：Airflow 支持基于条件动态生成任务，允许用户根据数据的变化自动调整 ETL 流程，提高了数据处理的灵活性。 开放源代码与社区支持：Apache Airflow 是开源项目，拥有活跃的社区，用户可以获得持续的更新和支持，同时可以根据需求定制功能。 使用 DBT 的优势 数据建模与转换：DBT 专注于数据转换，提供简洁的 SQL 语法，使数据团队能够轻松编写和管理数据模型。 版本控制：DBT 允许将数据转换过程纳入版本控制，使团队能够追踪更改，确保数据处理的透明性和可追溯性。 自动化文档生成：DBT 能自动生成数据文档，提供清晰的数据字典，有助于数据治理和合规性。 通过采用现代 ETL 工具，企业可以提高数据管道的管理效率，确保数据的透明性、可追溯性和可靠性，为后续的数据分析提供更坚实的基础。\n数据质量管理\n实施数据验证：使用数据质量工具（如 Great Expectations）实现自动化的数据质量检查，减少人为干预，提高效率。 元数据管理：建立元数据管理系统，以追踪数据来源、数据变更和数据使用情况，帮助团队理解数据上下文和业务含义。 容器化\n使用 Docker 和 Kubernetes：将数据处理和 ETL 流程容器化，使用 Docker 来创建轻量级、可移植的容器，确保应用程序在不同环境中的一致性。借助 Kubernetes 来管理和编排容器，支持自动扩展和高可用性。 环境一致性：容器化可以消除“在我机器上可以运行”的问题，确保开发、测试和生产环境的一致性，减少环境配置错误。 简化依赖管理：将应用及其依赖打包在一起，简化了软件的部署过程，便于版本管理和快速迭代。 监控与性能优化\n实时监控：使用监控工具（如 Prometheus、Grafana）对数据管道和数据库性能进行实时监控，及时发现并解决问题。 性能调优：定期评估查询性能，使用数据库的分析工具（如 EXPLAIN 语句）识别慢查询，优化索引和查询逻辑。 结语 # 参与此专利的研发，不仅让我对不同数据库的管理有了更深刻的理解，也提升了我的技术能力。我相信，随着数据管理技术的不断发展，类似的创新将会越来越重要，为企业的数据处理提供更多便利。\n","date":"2024-10-09","externalUrl":null,"permalink":"/zh-cn/projects/patent-cn111339081a-database-automation/","section":"项目","summary":"随着企业数据量的增长，管理和整合多种数据库成为了一大挑战。为","title":"如何自动收集异构数据库表目录 | 专利 CN111339081A 解析","type":"projects"},{"content":"","date":"2024-10-09","externalUrl":null,"permalink":"/zh-cn/tags/%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B/","section":"标签","summary":"","title":"数据工程","type":"tags"},{"content":" 展示项目 待更新。。。 ","date":"2024-10-09","externalUrl":null,"permalink":"/zh-cn/projects/","section":"项目","summary":"展示项目 待更新。。。","title":"项目","type":"projects"},{"content":"","date":"2024-10-09","externalUrl":null,"permalink":"/zh-cn/tags/%E4%B8%93%E5%88%A9/","section":"标签","summary":"","title":"专利","type":"tags"},{"content":"","date":"7 October 2024","externalUrl":null,"permalink":"/tags/blog-setup/","section":"Tags","summary":"","title":"Blog Setup","type":"tags"},{"content":"","date":"7 October 2024","externalUrl":null,"permalink":"/tags/custom-domain/","section":"Tags","summary":"","title":"Custom Domain","type":"tags"},{"content":"","date":"7 October 2024","externalUrl":null,"permalink":"/tags/documentation/","section":"Tags","summary":"","title":"Documentation","type":"tags"},{"content":"","date":"2024-10-07","externalUrl":null,"permalink":"/zh-cn/tags/github-pages/","section":"标签","summary":"","title":"GitHub Pages","type":"tags"},{"content":"","date":"7 October 2024","externalUrl":null,"permalink":"/series/personal-blog-documentation/","section":"Series","summary":"","title":"Personal Blog Documentation","type":"series"},{"content":"","date":"2024-10-07","externalUrl":null,"permalink":"/zh-cn/tags/seo/","section":"标签","summary":"","title":"SEO","type":"tags"},{"content":"","date":"2024-10-07","externalUrl":null,"permalink":"/zh-cn/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2024-10-07","externalUrl":null,"permalink":"/zh-cn/tags/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/","section":"标签","summary":"","title":"博客设置","type":"tags"},{"content":"","date":"2024-10-07","externalUrl":null,"permalink":"/zh-cn/series/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"个人博客 部署教程","type":"series"},{"content":" 热爱分享 ","date":"2024-10-07","externalUrl":null,"permalink":"/zh-cn/tech/","section":"技术","summary":"热爱分享","title":"技术","type":"tech"},{"content":"","date":"2024-10-07","externalUrl":null,"permalink":"/zh-cn/tags/%E6%96%87%E6%A1%A3/","section":"标签","summary":"","title":"文档","type":"tags"},{"content":"","date":"2024-10-07","externalUrl":null,"permalink":"/zh-cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/","section":"标签","summary":"","title":"自定义域名","type":"tags"},{"content":" 2024-10-05偶遇的蘑菇🍄 # 作为一名热爱野外寻找蘑菇的爱好者，我总是认为最令人兴奋的发现会在远离城市的森林深处，然而这次的经历打破了我的常规认知。在一次城郊的徒步旅程中，我在运河边意外发现了一株毒蝇伞。\n一片白蘑菇海…与一株特别的发现 # 事情的经过其实十分平淡。我本来只是沿着运河边散步，并没有刻意去寻找什么。然而，一大簇密密麻麻的白蘑菇吸引了我的目光，它们紧紧簇拥在一起，形成了一片白色的“蘑菇海”。坦白说，一开始这些蘑菇并没有让我特别感兴趣，它们看起来普普通通，我本打算直接走过。\n就在我准备离开的时候，一丛长得非常好看的白蘑菇引起了我的注意，我便拿出相机靠近准备拍照。而就在我走近的过程中，我意外发现了一株非常显眼的小蘑菇——它的伞盖呈现出鲜艳的红色，圆鼓鼓的，还未完全展开。就在那一刻，我意识到这不是什么普通的蘑菇，它就是毒蝇伞 (学名：Amanita muscaria)。\n典型毒蘑菇形象 # 当时，我并不确定这株蘑菇的具体名称，但它的外形已经给我足够的线索：它长得就像人们常说的 ‘有毒的红伞蘑菇’，甚至与我们在表情符号里看到的蘑菇 🍄 完全一致。那一瞬间，我的兴奋难以言表，没想到在这样一处看似平常的地方，我竟然遇见了如此标志性的蘑菇！\n毒蝇伞之所以如此著名，主要是因为它非常易于辨认，典型特征包括：\n鲜红的伞盖：通常伴有白色或淡黄色的斑点，这是菌盖表面的一层膜破裂后留下的痕迹。 白色的菌柄：笔直修长，通常带有一个像裙子一样的环带。 W白色的菌褶：排列紧密，位于伞盖下方。 白色的孢子印：如果你碰巧采集到孢子印，可以看到它是白色的。 然而，我发现的这株毒蝇伞还处于生长的早期阶段，伞盖呈球状，还未完全展开。能够近距离观察到毒蝇伞在如此早期的生长阶段，真是一次难得的经历。\n“红伞伞，白杆杆”：文化中的经典形象 # 毒蝇伞不仅仅是一个自然界中的危险蘑菇，它在很多文化中也是经典形象。在英国，它经常出现在童话故事、电子游戏和插画中，鲜艳的红色伞盖和白色斑点让它看起来像是从神话中走出来的一样。然而，它美丽的外表背后却隐藏着极强的毒性。有一句在中国广泛流传的网络流行语正好描述了它的样子：“红伞伞，白杆杆”，这句话正是形容像毒蝇伞这样的危险蘑菇。\n毒蝇伞含有伊波苷酸和毒蝇碱等毒素，误食后可能引起恶心、呕吐、幻觉和意识混乱。虽然它一般不会致命，但绝对不适合随意尝试！有趣的是，在一些文化中，如西伯利亚的一些部落，毒蝇伞曾被用于宗教仪式中，因其具有精神活性。但在我们的日常生活中，最好的做法是远观而不亵玩。\n城市边缘的意外惊喜 # 这次的发现之所以特别，除了蘑菇本身，更多的是因为它的生长位置。我从未想到能在这样一个城市郊区的运河边，发现如此罕见的蘑菇。这提醒了我，自然的惊喜并不仅仅存在于远离人烟的森林深处，偶尔它们也会出现在你意想不到的地方，比如城市边缘的宁静小道旁。\n虽然那片白蘑菇是我最初注意到的，但最终让我停下脚步的，毫无疑问是这株鲜红的毒蝇伞。仿佛是大自然精心安排，让我在这次徒步中遇到了它。\n野外找蘑菇：安全第一 # 虽然野外寻找蘑菇是一种与自然亲近的绝佳方式，但安全始终应该放在第一位。如果你对发现的蘑菇没有十足的把握，最好不要采摘或食用。以下是一些实用的安全提示：\n不吃任何不确定的蘑菇：许多蘑菇外形相似，有些致命的毒蘑菇与可食用的种类极为相近。 使用可靠的指南或应用程序来帮助辨认蘑菇。 尽量避免直接接触。一些蘑菇即使不食用，接触皮肤也可能引发刺激甚至更严重的问题，所以最好戴上手套再操作。 结语 # 在运河边发现毒蝇伞，给我带来了无比的惊喜。这次经历提醒我，大自然的奇迹往往隐藏在我们意想不到的地方。即便是在城市的边缘，依然可以邂逅令人激动的美丽生物。\n如果你也曾有过类似的意外发现，无论是在森林深处还是家门口附近，我非常愿意听到你的故事！毕竟，谁也不知道下一个惊喜会在哪里等着我们。\n“红伞伞，白杆杆”：危险蘑菇的童谣 # 如前所述，毒蝇伞在中国文化中以一首耳熟能详的童谣广为人知。这首童谣既是警示，也是对食用鲜艳蘑菇的幽默描述。以下是这首童谣的完整版以及英文翻译：\n中文原文： English Translation: 红伞伞，白杆杆 Red cap, white stem 吃完一起躺板板 After eating, you’ll all lie flat 躺板板，埋山山 Lie flat, buried in the hill 亲朋都来吃饭饭 Friends and family come for a meal 饭饭里有红伞伞 In the meal, there\u0026#39;s a red cap 吃完全村都埋山山 Eat it, and the whole village is buried in the hill 来年长满红伞伞 Next year, the hill will be full of red caps ","date":"2024-10-06","externalUrl":null,"permalink":"/zh-cn/life/fungi_05oct2024/","section":"生活","summary":"2024-10-05偶遇的蘑菇🍄 # 作为一名热爱野外寻找蘑菇的","title":"🍄意外之喜：在运河边发现的毒蝇伞","type":"life"},{"content":"","date":"6 October 2024","externalUrl":null,"permalink":"/tags/life/","section":"Tags","summary":"","title":"Life","type":"tags"},{"content":"","date":"6 October 2024","externalUrl":null,"permalink":"/tags/mushroom/","section":"Tags","summary":"","title":"Mushroom","type":"tags"},{"content":"","date":"2024-10-06","externalUrl":null,"permalink":"/zh-cn/tags/%E8%98%91%E8%8F%87/","section":"标签","summary":"","title":"蘑菇","type":"tags"},{"content":"","date":"2024-10-06","externalUrl":null,"permalink":"/zh-cn/tags/%E7%94%9F%E6%B4%BB/","section":"标签","summary":"","title":"生活","type":"tags"},{"content":" 🏋️\u0026amp;⛰️\u0026amp;🍄 ","date":"2024-10-06","externalUrl":null,"permalink":"/zh-cn/life/","section":"生活","summary":"🏋️\u0026amp;⛰️\u0026amp;🍄","title":"生活","type":"life"},{"content":" 1. Fleecyfoot Conecap🍄 # 可能是 Fleecyfoot Conecap。 含有迷幻生物碱西洛昔宾(psychedelic alkaloids psilocybin)和西洛霉素(psilocin)。 https://www.gbif.org/species/2529949\n2. Grey Knight🍄 # 可能是Grey Knight\u0026ndash;Tricholoma terreum。 2014 年的一篇文章推测它可能有毒，但 Sitta 等人于 2016 年在同一期刊上发表了一篇反驳文章，证明这种推测毫无根据。 https://www.naturespot.org.uk/species/grey-knight https://en.wikipedia.org/wiki/Tricholoma_terreum\n3. Parasola plicatilis🍄 # 可能是 Parasola plicatilis。 该物种虽然无毒，但一般被认为不可食用。 https://commons.wikimedia.org/wiki/Parasola_plicatilis https://en.wikipedia.org/wiki/Parasola_plicatilis\n所有 🍄 发现于 Muntz Park, Gristhorpe Rd, Birmingham B29 7TD\n","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/life/fungi_14sep2024/","section":"生活","summary":"1. Fleecyfoot Conecap🍄 # 可能是 Fleecyfoot Conecap。 含有迷幻生物碱","title":"2024-09-14偶遇的蘑菇🍄","type":"life"},{"content":"","date":"24 September 2024","externalUrl":null,"permalink":"/tags/bug/","section":"Tags","summary":"","title":"Bug","type":"tags"},{"content":"","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/tags/git/","section":"标签","summary":"","title":"Git","type":"tags"},{"content":"","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","section":"标签","summary":"","title":"问题解决","type":"tags"},{"content":" 问题描述: # 这几天一直在用github来配置和更新博客，但是今天发现github上的contributions并没有我的提交记录。其次相关repository的commits显示如下\n原因: # 电脑git是用homebrew安装的，mac并没有进行本地配置，直接用终端把本地文件push到仓库中了。\n因为本地的git默认的user.name和user.email并不是github中的，而是本机的。所以在此期间的commit都是默认本机的。\n1. 查看commit记录. # $git log 虽然在往你的github仓库中push，但是用户名和邮箱却不是你，而是系统默认的pc用户。\n2. 查看自己的git所属 # $git config user.name $git config user.email 查不出的结果应该是为空。所以github贡献统计的根本就不是你的账户。\n解决办法: # 1. 配置本地git # $git config --global user.name \u0026#34;github accountname\u0026#34; $git config --global user.email \u0026#34;github@xx.com\u0026#34; 这里只是在git config 后边添加上了要更改的内容即可，--global参数指的是全局，也就是本地的所有仓库，如果不加就是单个仓库。\n修改好后，以后的commit就是你的账户了，就能被统计贡献。\n2. 修改commit和push历史 # 修改所有的commit和push历史，把之前所有用默认账户的commit都归为真正的账户名下。\n# AUTHOR记录的是这次修改的作者信息 $git filter-branch -f --env-filter \u0026#39; if [ \u0026#34;$GIT_AUTHOR_NAME\u0026#34; = \u0026#34;oldName\u0026#34; ] then export GIT_AUTHOR_NAME=\u0026#34;newName\u0026#34; export GIT_AUTHOR_EMAIL=\u0026#34;newEmail\u0026#34; fi \u0026#39; HEAD #COMMITTER是这次提交的用户信息 $git filter-branch -f --env-filter \u0026#39; if [ \u0026#34;$GIT_COMMITTER_NAME\u0026#34; = \u0026#34;oldName\u0026#34; ] then export GIT_COMMITTER_NAME=\u0026#34;newName\u0026#34; export GIT_COMMITTER_EMAIL=\u0026#34;newEmail\u0026#34; fi \u0026#39; HEAD 注意两者区别，\n如果自己写自己提交，那么两者都是你。\n有的项目有的人并没有commit权限，所以修改完之后需要交给有权限的人提交，这样你是AUTHOR并不是COMMITTER\n如果修改成功提示:Ref \u0026lsquo;refs/heads/master\u0026rsquo; was rewritten\n如果修改失败提示:Ref \u0026lsquo;refs/heads/master\u0026rsquo; is unchanged这里可能是因为填写的oldName并没有找到。\n如果无差别修改的话去掉if..fi\n$git filter-branch -f --env-filter \u0026#34; GIT_AUTHOR_NAME=\u0026#39;newName\u0026#39;; GIT_AUTHOR_EMAIL=\u0026#39;newEmail\u0026#39;; GIT_COMMITTER_NAME=\u0026#39;newName\u0026#39;; GIT_COMMITTER_EMAIL=\u0026#39;newEmail\u0026#39; \u0026#34; HEAD 3. push到远程仓库 # 使用强制push的方法： $git push -u origin master -f 这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n我这里只是自己写的博客，所以就直切全部强制覆盖掉了。\npush前先将远程repository修改pull下来 $git pull origin main $git push -u origin main 若不想merge远程和本地修改，可以先创建新的分支： $git branch [name] $git push -u origin [name] 最终修改成功🎉\n","date":"2024-09-24","externalUrl":null,"permalink":"/zh-cn/tech/github_contribution_issues/","section":"技术","summary":"问题描述: # 这几天一直在用github来配置和更新博客，但是","title":"问题解决——本地提交至GitHub仓库，贡献不显示","type":"tech"},{"content":"","date":"23 September 2024","externalUrl":null,"permalink":"/tags/config/","section":"Tags","summary":"","title":"Config","type":"tags"},{"content":"","date":"23 September 2024","externalUrl":null,"permalink":"/tags/docs/","section":"Tags","summary":"","title":"Docs","type":"tags"},{"content":"","date":"2024-09-23","externalUrl":null,"permalink":"/zh-cn/tags/%E9%85%8D%E7%BD%AE/","section":"标签","summary":"","title":"配置","type":"tags"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/tags/aboutme/","section":"Tags","summary":"","title":"Aboutme","type":"tags"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。\u0026#x1f680;\n你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\n","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/tags/advanced/","section":"标签","summary":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页","title":"高级","type":"tags"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/tags/%E5%85%B3%E4%BA%8E%E6%88%91/","section":"标签","summary":"","title":"关于我","type":"tags"},{"content":" 简介 # 于伯明翰大学计算机科学专业硕士毕业。非常幸运地在Peter Hancox博士的指导下完成了我的论文，题目是《Yelp评论的细粒度情感分析与多类不平衡数据的探索》。在过去的几年里，我积累了丰富的软件工程师经验。我的专长是软件开发、数据分析和机器学习，在 Java, Python 等技术和 AWS 等云服务方面拥有丰富的实践经验。\n工作之余，我喜欢探索城市和听歌手周深的歌曲。我还运营着一个关于这位歌手的数据库查询网站，供一个大约40人的粉丝群体使用。这个网站包含大约16万条数据，使用MySQL数据库、Python爬虫技术和Flask框架开发。\n兴趣 # 软件开发 数据科学 人工智能 健身🏋️ 探索大自然，包括但不限于：徒步⛰️、寻找蘑菇🍄 技能 # Programming Languages: Java, Python, SQL Cloud \u0026amp; DevOps: AWS, Docker, Kubernetes, Terraform, Jenkins, GIT, GitHub Actions Databases \u0026amp; Messaging: Redis, Kafka, MongoDB, MySQL, Oracle, PostgreSQL Methodologies \u0026amp; Tools: dbt, Airflow, Agile, CI/CD, Microservices, RESTful APIs 教育背景 # 计算机科学硕士，2022年（Distinction）\n伯明翰大学\n检测与控制技术及仪器学士，2017年\n山东大学\n","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/docs/%E5%85%B3%E4%BA%8E%E6%88%91/","section":"文档","summary":"简介 # 于伯明翰大学计算机科学专业硕士毕业。非常幸运地在Pet","title":"关于我","type":"docs"},{"content":" ","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/docs/","section":"文档","summary":"","title":"文档","type":"docs"}]